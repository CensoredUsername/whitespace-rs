searchState.loadedDescShard("whitespacers", 0, "The program tried to return but there was no location to …\nDivision or Modulo by zero.\nUse wrapping arithmetric instead of detecting overflow and …\nSomething went wrong while trying to read from input or …\nA whitespace interpreter. This struct provides various …\nAn overflow occurred when a number input was requested. …\nThe program tried to execute an instruction that doesn’t …\nA missing key was requested from the heap.\nDon’t fall back to biginteger interpretation on …\nRaise an error on hitting the end of the program instead …\nThese are bitflag options to alter the behaviour of the …\nAn overflow occurred during an arithmetric operation. This …\nCompile-time parse error\nThis struct contains the internal representation of a …\nThe program tried to read a number but no number was given.\nThe stack was not of the correct size to execute an …\nWhen an unknown key used to get an item from the heap, …\nThe common error type returned from all whitespacers …\nSimple information on what kind of error occurred.\nGet a flags value with all known bits set.\nParse a program written in whitespace assembly into a …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nSimilar to Interpreter::interpret_with_simple_state but …\nReturns a buffer containing the output of the compilation …\nThe intersection of a source flags value with the …\nDisassemble a program into a human-readable whitespace …\nSerialize the internal representation back into a …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nProvide a nice error message using information stored in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInterpret the program using only bignum-based simple …\nInterprets the program with optimized data structures, …\nThe reference interpreter implementation. It uses simple …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nUse a jit compiler that compiles the entire program in …\nUse a jit compiler that compiles code synchronously while …\nUse a jit compiler that compiles the program in a separate …\nThe kind of error that occurred.\nRewrites labels to ensure the resulting program is as …\nConstruct a new whitespace interpreter from a program, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse a program written in whitespace to a format suitable …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nRemove source location information from the program.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.")