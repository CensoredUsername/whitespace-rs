var searchIndex = new Map(JSON.parse('[\
["whitespacers",{"doc":"","t":"PPTPFPPPTTFPPFPPTFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CallStackError","DivisionError","IGNORE_OVERFLOW","IOError","Interpreter","InumOverflow","InvalidIndex","KeyError","NO_FALLBACK","NO_IMPLICIT_EXIT","Options","Overflow","ParseError","Program","RuntimeParseError","StackError","UNCHECKED_HEAP","WsError","WsErrorKind","all","assemble","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","complement","contains","count_with_simple_state","debug_compile","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","difference","disassemble","drop","drop","drop","drop","drop","dump","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_with_program","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","hash","init","init","init","init","init","insert","interpret_with_bigint_state","interpret_with_fast_state","interpret_with_simple_state","intersection","intersects","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","jit_aot","jit_sync","jit_threaded","kind","minify","new","not","parse","remove","set","strip","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union"],"q":[[0,"whitespacers"],[151,"alloc::string"],[152,"core::result"],[153,"core::error"],[154,"core::option"],[155,"alloc::vec"],[156,"core::iter::traits::collect"],[157,"core::fmt"],[158,"core::fmt"],[159,"core::hash"],[160,"bitflags::iter"],[161,"bitflags::iter"],[162,"std::io"]],"d":["The program tried to return but there was no location to …","Division or Modulo by zero.","Use wrapping arithmetric instead of detecting overflow and …","Something went wrong while trying to read from input or …","A whitespace interpreter. This struct provides various …","An overflow occurred when a number input was requested. …","The program tried to execute an instruction that doesn’t …","A missing key was requested from the heap.","Don’t fall back to biginteger interpretation on …","Raise an error on hitting the end of the program instead …","These are bitflag options to alter the behaviour of the …","An overflow occurred during an arithmetric operation. This …","Compile-time parse error","This struct contains the internal representation of a …","The program tried to read a number but no number was given.","The stack was not of the correct size to execute an …","When an unknown key used to get an item from the heap, …","The common error type returned from all whitespacers …","Simple information on what kind of error occurred.","Get a flags value with all known bits set.","Parse a program written in whitespace assembly into a …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Similar to Interpreter::interpret_with_simple_state but …","Returns a buffer containing the output of the compilation …","","","","","","","","","","","","The intersection of a source flags value with the …","Disassemble a program into a human-readable whitespace …","","","","","","Serialize the internal representation back into a …","Get a flags value with all bits unset.","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","Provide a nice error message using information stored in …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Interpret the program using only bignum-based simple …","Interprets the program with optimized data structures, …","The reference interpreter implementation. It uses simple …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Use a jit compiler that compiles the entire program in …","Use a jit compiler that compiles code synchronously while …","Use a jit compiler that compiles the program in a separate …","The kind of error that occurred.","Rewrites labels to ensure the resulting program is as …","Construct a new whitespace interpreter from a program, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Parse a program written in whitespace to a format suitable …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Remove source location information from the program.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values."],"i":[10,10,1,10,0,10,10,10,1,1,0,10,10,0,10,10,1,0,0,1,3,1,1,1,1,1,1,1,1,12,3,1,4,10,12,3,1,4,10,4,3,1,10,3,1,10,1,1,12,0,12,3,1,4,10,12,3,1,4,10,4,1,3,12,3,1,4,10,3,1,1,1,3,1,1,1,1,1,4,4,10,4,12,3,1,4,4,10,1,1,1,1,1,1,1,12,3,1,4,10,1,12,12,12,1,1,12,3,1,4,10,1,1,1,1,1,12,12,12,4,3,12,1,3,1,1,3,1,1,1,3,1,10,4,1,12,3,1,4,10,12,3,1,4,10,12,3,1,4,10,1],"f":"```````````````````{{}b}{d{{j{fh}}}}{{bb}b}{{bb}l}10{bn}021{ce{}{}}000000000{h{{Ab{A`}}}}{ff}{bb}{AdAd}{{ce}l{}{}}002{{bb}Af}{Ah{{j{Ajh}}}}{{fb}{{Al{n}}}}{Ajc{}}000000000{hAn}={fd}{Ajl}0000{f{{Al{n}}}}{{}b}8{{bc}l{{Bb{}{{B`{b}}}}}}{{fBd}Bf}{{bBd}Bf}0000{{hBd}{{j{lBh}}}}{{hBd}Bf}{{AdBd}Bf}{{hf}d}{cc{}}00{Bjh}11{n{{Ab{b}}}}{nb}00{cb{{Bb{}{{B`{b}}}}}}{An{{Ab{b}}}}{{bc}lBl}{{}Aj}0000{{bb}l}{Ah{{j{lh}}}}00{{bb}b}{{bb}Af}{ce{}{}}0000{bc{}}{bAf}0{b{{Bn{b}}}}{b{{C`{b}}}}777`{fl}{{fbCbCd}Ah}{bb}{{{Al{n}}}{{j{fh}}}}<{{bbAf}l}4;=;999{cd{}}>{c{{j{e}}}{}{}}000000000{cCf{}}0000>","c":[],"p":[[5,"Options",0],[5,"String",151],[5,"Program",0],[5,"WsError",0],[6,"Result",152],[1,"unit"],[1,"u8"],[10,"Error",153],[6,"Option",154],[6,"WsErrorKind",0],[1,"bool"],[5,"Interpreter",0],[1,"usize"],[5,"Vec",155],[1,"str"],[17,"Item"],[10,"IntoIterator",156],[5,"Formatter",157],[8,"Result",157],[5,"Error",157],[5,"Error",158],[10,"Hasher",159],[5,"Iter",160],[5,"IterNames",160],[10,"BufRead",161],[10,"Write",161],[5,"TypeId",162]],"b":[[25,"impl-Flags-for-Options"],[26,"impl-Options"],[73,"impl-LowerHex-for-Options"],[74,"impl-Octal-for-Options"],[75,"impl-UpperHex-for-Options"],[76,"impl-Binary-for-Options"],[77,"impl-Debug-for-Options"],[78,"impl-Display-for-WsError"],[79,"impl-Debug-for-WsError"],[89,"impl-Flags-for-Options"],[90,"impl-Options"]]}],\
["wsc",{"doc":"","t":"GPFPPPPPPPGPGPPPONNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNONNNNNNNNONNNNHOOOHOONNNNNNNNNNNNQNNNN","n":["Action","AoT","Args","Assembly","Async","BigState","Count","Dump","Execute","FastState","FileFormat","SimpleState","Strategy","Sync","Translate","Whitespace","action","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","console_main","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","format","from","from","from","from","init","init","init","init","input","into","into","into","into","main","minify","options","output","parse_args","perf","program","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_opt","type_id","type_id","type_id","type_id"],"q":[[0,"wsc"],[91,"core::error"],[92,"alloc::boxed"],[93,"core::result"],[94,"core::fmt"],[95,"core::fmt"],[96,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,4,0,2,4,4,4,3,3,4,0,4,0,4,3,2,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,2,3,4,1,2,3,4,1,1,2,3,4,1,2,3,4,1,1,2,3,4,0,1,1,1,0,1,1,1,2,3,4,1,2,3,4,1,2,3,4,0,1,2,3,4],"f":"`````````````````{ce{}{}}0000000{bb}{dd}{ff}{hh}{{ce}j{}{}}000{{}{{A`{j{n{l}}}}}}{Abc{}}0000000{Abj}000{{dd}Ad}{{ff}Ad}{{hh}Ad}{{bAf}Ah}{{dAf}Ah}{{fAf}Ah}{{hAf}Ah}`{cc{}}000{{}Ab}000`{ce{}{}}000{{}j}```{{}{{A`{bAj}}}}``2222{c{{A`{e}}}{}{}}0000000`{cAl{}}000","c":[],"p":[[5,"Args",0],[6,"FileFormat",0],[6,"Action",0],[6,"Strategy",0],[1,"unit"],[10,"Error",91],[5,"Box",92],[6,"Result",93],[1,"usize"],[1,"bool"],[5,"Formatter",94],[8,"Result",94],[5,"String",95],[5,"TypeId",96]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
